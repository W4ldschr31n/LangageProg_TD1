package tp.v3;import java.lang.reflect.Method; import java.util.Iterator;public interface ListeRenversable<E> extends Iterable<E>{     /**     * Cree un iterator sur la liste     * @return IterateurListe     */    default Iterator<E> iterator() {        return new IterateurListe<E>((Liste<E>)this);    }    /**     * Inverse la liste (le premier �l�ment devient le dernier et vice versa).     * @return la liste invers�e.     */    default Liste<E> miroir(){        Liste<E> miroir;        try {            //On cr�e appelle la fabrique vide() de l'interface concern�e            miroir = (Liste<E>) this.getClass().getInterfaces()[0].getMethod("vide").invoke(null);            Method[] methodtable = this.getClass().getInterfaces()[0].getMethods();            Method cons = null;            for(int i = 0 ; i < methodtable.length ; ++i)            {                if(methodtable[i].getName().equals("cons")) {                    cons = methodtable[i];                    break;                }            }            for(E e:this){                //On appelle la fabrique cons de l'interface concern�e                miroir = (Liste<E>) cons.invoke(this, new Object[]{e, miroir});            }            return miroir;        } catch (Exception e) {            e.printStackTrace();            return null;        }    }     default public String representer(){        Iterator<E> it = iterator();        String rep = "[";        while (it.hasNext()){            rep += it.next()+",";        }        return rep+"]";     } } 